{"version":3,"file":"index.js","mappings":"2BAAA,MAAMA,EAAW,EAAQ,KAInBC,EAAa,IAAIC,EAFRF,EAASE,QAEM,CAC5BC,MAAO,CAAEC,KAAMC,OAAQC,OAAQ,KAC/BC,SAAU,CAAEH,KAAMC,OAAQG,UAAU,GACpCC,SAAU,CACRL,KAAMJ,EAASE,OAAOQ,MAAMC,SAC5BC,IAAK,QAEPC,KAAM,CAAET,KAAMC,QACdS,KAAMC,OACNC,QAASD,SAGLE,EAAOjB,EAASkB,MAAM,OAAQjB,GAEpCkB,EAAOC,QAAUH,G,aCjBjB,MAAMjB,EAAW,EAAQ,KACnBqB,EAAS,EAAQ,IAIjBC,EAAa,IAAIpB,EAFRF,EAASE,QAEM,CAC5BqB,SAAU,CAAEC,QAAQ,EAAMpB,KAAMC,OAAQG,UAAU,GAClDiB,MAAO,CAAErB,KAAMC,OAAQG,UAAU,EAAMgB,QAAQ,GAC/CE,SAAU,CAAEtB,KAAMC,OAAQG,UAAU,EAAMmB,UAAW,GAErDC,WAAY,CAAExB,KAAMyB,QAASC,SAAS,GACtCC,MAAO,CACL,CACE3B,KAAMJ,EAASE,OAAOQ,MAAMC,SAC5BC,IAAK,SAGToB,YAAaC,KACbC,IAAK,CAAE9B,KAAMC,QACb8B,IAAK9B,SAIPiB,EAAWc,IAAI,QAAQC,eAAgBC,GAChCC,KAAKC,WAAW,aAAaF,IAClC,MAAMG,QAAapB,EAAOqB,QAAQ,IAC5BC,QAAatB,EAAOsB,KAAKJ,KAAKb,SAAUe,GAC9CF,KAAKb,SAAWiB,EAChBL,OAGF,MAAMM,EAAO5C,EAASkB,MAAM,OAAQI,GAEpCH,EAAOC,QAAUwB,G,cClCjB,MAAMC,EAAU,EAAQ,KAClBC,EAAO,EAAQ,KACfC,EAAa,EAAQ,KACrBC,EAAa,EAAQ,KACrBC,EAAa,EAAQ,KAErBC,EAAML,IACZK,EAAIC,IAAIN,EAAQO,QAChBF,EAAIC,IAAIL,EAAK,CAAEO,OAAQ,wBAAyBC,aAAa,KAC7DJ,EAAIC,IAAI,eAAgBJ,GACxBG,EAAIC,IAAI,gBAAiBH,GACzBE,EAAIC,IAAI,eAAgBF,GAExB9B,EAAOC,QAAU8B,G,cCbjB,MAAM7B,EAAS,EAAQ,IACjBkC,EAAM,EAAQ,KACdX,EAAO,EAAQ,IACfY,EAAuB,EAAQ,KA6GrCrC,EAAOC,QAAU,CAAEqC,MA3GLpB,MAAOqB,EAAKC,KACxB,IACE,MAAM,MAAElC,EAAK,SAAEC,GAAagC,EAAIE,KAC1BC,QAAkBjB,EAAKkB,QAAQ,CACnCrC,MAAOA,IAGT,IAAKoC,EACH,OAAOF,EACJI,OAAO,KACPX,KAAK,CAAEY,SAAS,EAAOC,QAAS,mBAGrC,IAAKJ,EAAUjC,WACb,OAAO+B,EACJI,OAAO,KACPX,KAAK,CAAEY,SAAS,EAAOC,QAAS,0BAKrC,IAAe,UAFM5C,EAAO6C,QAAQxC,EAAUmC,EAAUnC,UAGtD,OAAOiC,EACJI,OAAO,KACPX,KAAK,CAAEY,SAAS,EAAOC,QAAS,wBAGrC,MAAME,EAAQZ,EAAIa,KAChB,CACE7C,SAAUsC,EAAUtC,SACpBE,MAAOoC,EAAUpC,OAEnB4C,QAAQC,IAAIC,WACZ,CAAEC,UAAW,OAGfb,EAAII,OAAO,KAAKX,KAAK,CACnBY,SAAS,EACTpC,WAAYiC,EAAUjC,WACtB6C,KAAM,CACJhD,MAAOoC,EAAUpC,MACjBF,SAAUsC,EAAUtC,SACpBY,IAAK0B,EAAU1B,KAEjBgC,MAAAA,IAEF,MAAOO,GACPf,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAOW,MAAO,CAAED,EAAAA,EAAGT,QAASS,EAAET,aA4DxCW,SAxDTvC,MAAOqB,EAAKC,KAC3B,MAAM,SAAEpC,EAAQ,SAAEG,EAAQ,MAAED,EAAK,YAAEO,GAAgB0B,EAAIE,KAKvD,UAJwBhB,EAAKkB,QAAQ,CACnCrC,MAAOA,MAGMA,QAAUA,EACvB,OAAOkC,EACJI,OAAO,KACPX,KAAK,CAAEY,SAAS,EAAOC,QAAS,wBAGrC,MAAMY,QAAoBjC,EAAKkC,OAAO,CACpCvD,SAAAA,EACAG,SAAAA,EACAD,MAAAA,EACAO,YAAAA,IAGFwB,EAAqBqB,EAAYpD,MAAOoD,EAAYE,KAEpDpB,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAMC,QAAS,+BAmCbe,aA/Bf3C,MAAOqB,EAAKC,KAC/B,MAAM,MAAEQ,GAAUT,EAAIuB,OAEtB,IACE,MAAMC,EAAS3B,EAAI4B,OAAOhB,EAAOE,QAAQC,IAAIc,cAE7C,IAAIvB,QAAkBjB,EAAKyC,SAASH,EAAOI,SACtCzB,GACHF,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAOW,MAAO,wBAGhDd,EAAUjC,YAAa,QACjBiC,EAAU0B,OAEhB5B,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,IAChC,MAAOU,GACPf,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAOW,MAAO,yBAeAa,SAVjCnD,MAAOqB,EAAKC,KAC3B,IAAKA,EAAI8B,OAAOhB,KACd,OAAOd,EACJI,OAAO,KACPX,KAAK,CAAEY,SAAS,EAAOW,MAAO,0BAGnChB,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAMS,KAAMd,EAAI8B,OAAOhB,U,cC7GzD,MAAMxD,EAAO,EAAQ,KACf2B,EAAO,EAAQ,IACf8C,EAAa,EAAQ,KAgG3BvE,EAAOC,QAAU,CAAEuE,WA9FAtD,MAAOqB,EAAKC,KAC7B,IAEE,MAAM5B,QAAcd,EAAK2E,OAAOC,SAAS,YAWzCC,QAAQC,IAAI,sBACZpC,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAMjC,MAAAA,IACtC,MAAO2C,GACPoB,QAAQC,IAAIrB,GACZf,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAOW,MAAO,2BA4EnBqB,WAxEZ3D,MAAOqB,EAAKC,KAC7BA,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAMiC,KAAM,iBAuEHC,WA1BxB7D,MAAOqB,EAAKC,KAC7B,IACE,MAAM,GAAEwC,GAAOzC,EAAIuB,OACbmB,EAAO1C,EAAIE,KAEXyC,QAAoBpF,EAAKqF,kBAAkB,CAAEvB,IAAKoB,GAAMC,GAC9DN,QAAQC,IAAIM,GAEZ1C,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAMqC,YAAa,WACnD,MAAO3B,GACPoB,QAAQC,IAAIrB,GACZf,EAAII,OAAO,KAAKX,KAAK,CAAEmD,QAAQ,EAAOtC,QAASS,EAAET,YAeEuC,WAXpCnE,MAAOqB,EAAKC,KAC7B,IACE,MAAM,GAAEwC,GAAOzC,EAAIuB,aACbhE,EAAKwF,kBAAkBN,GAC7BxC,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,IAChC,MAAOU,GACPoB,QAAQC,IAAIrB,GACZf,EAAII,OAAO,KAAKX,KAAK,CAAEmD,QAAQ,EAAOtC,QAASS,EAAET,YAIcyC,WApEhDrE,MAAOqB,EAAKC,KAK7B,IACE,MAAM,KAAEc,GAASd,EAAI8B,QACf,MAAEtF,GAAUuD,EAAIE,KAChB+C,EAAW,GAAGjD,EAAIkD,KAAKC,OAEvBtG,SADemF,EAAWoB,SAASC,OAAOJ,IACxBK,WAElBC,QAAmBrE,EAAKkB,QAAQ,CACpCvC,SAAUkD,EAAKlD,WAGjB,IAAK0F,EACH,OAAOtD,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAOW,MAAO,eAEvD,MAAMuC,QAAoBjG,EAAK6D,OAAO,CACpC3E,MAAAA,EACAI,SAAAA,EAEAE,SAAUwG,EAAWlC,YAGjBnC,EAAKuE,iBACT,CAAE5F,SAAUkD,EAAKlD,UACjB,CACE6F,MAAO,CACLrF,MAAO,CAACmF,EAAYnC,QAK1BpB,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAMC,QAAS,iBAC/C,MAAOS,GACPoB,QAAQC,IAAIrB,GACZf,EAAII,OAAO,KAAKX,KAAK,CAAEmD,QAAQ,EAAOtC,QAASS,EAAET,c,cCpErD,MAAMrB,EAAO,EAAQ,IAmCrBzB,EAAOC,QAAU,CAAEiG,QAjCHhF,MAAOqB,EAAKC,KAC1B,IACE,MAAM,KAAEc,GAASd,EAAI8B,OAEfP,QAAetC,EAAKgD,KAAK,CAC7BnE,MAAOgD,EAAKhD,QAEX6F,OAAO,aACPzB,SAAS,SAEZlC,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAMkB,OAAAA,IACtC,MAAOR,GACPf,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAOW,MAAOD,EAAET,YAqBxBsD,YAjBRlF,MAAOqB,EAAKC,KAC9B,IACE,MAAM,GAAEwC,GAAOzC,EAAIuB,OAEbpB,QAAkBjB,EAAKyC,SAASc,GACnCmB,OAAO,aACPzB,SAAS,SAEZ,IAAKhC,EACH,OAAOF,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAOW,MAAO,mBAEvDhB,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAMkB,OAAQrB,IAC9C,MAAOa,GACPf,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAOW,MAAOD,EAAET,c,cC/BpD,MAAMV,EAAM,EAAQ,KAuBpBpC,EAAOC,QArBWiB,MAAOqB,EAAKC,EAAKrB,KACjC,IACE,IAAI6B,EAAQT,EAAI8D,SAASC,eAGzB,GAFAtD,EAAQA,EAAMuD,MAAM,KAAK,IAEpBvD,EACH,OAAOR,EAAII,OAAO,KAAKX,KAAK,CAC1BuB,MAAO,CACLV,QAAS,qBAKf,MAAMiB,QAAe3B,EAAI4B,OAAOhB,EAAOE,QAAQC,IAAIC,YACnDZ,EAAI8B,OAAOhB,KAAOS,EAClB5C,IACA,MAAOoC,GACPf,EAAII,OAAO,KAAKX,KAAK,CAAEY,SAAS,EAAOW,MAAOD,O,cCnBlD,MAAMiD,EAAS,EAAQ,KAEjBC,EAAUD,EAAOE,YAAY,CACjCC,YAAYpE,EAAKkD,EAAMmB,GACrBA,EAAG,KAAM,YAEXC,SAAStE,EAAKkD,EAAMmB,GAClBA,EAAG,KAAM,GAAGnB,EAAKqB,aAAaP,MAAM,KAAK,aAIvCX,EAASY,EAAO,CACpBC,QAAAA,EACAM,OAAQ,CAAEC,SAAU,KACpBC,WAAW1E,EAAKkD,EAAMmB,GACpB,IAAKnB,EAAKqB,aAAaI,MAAM,sBAC3B,OAAON,EAAG,IAAIO,MAAM,qDAEtBP,OAAGQ,GAAW,MAWlBnH,EAAQoH,YAAczB,EAAO0B,OAAO,S,cC7BpC,MAAMC,EAAY,EAAQ,MACpB,OAAEC,GAAW,EAAQ,MACrB,MACJlF,EAAK,SACLmB,EAAQ,aACRI,EAAY,SACZQ,GACE,EAAQ,KAENoD,EAASD,IAGfC,EAAOC,MAAM,UAAU5C,KAAKxC,GAC5BmF,EAAOC,MAAM,aAAa5C,KAAKrB,GAC/BgE,EAAOC,MAAM,wBAAwBC,IAAI9D,GACzC4D,EAAOC,MAAM,aAAaC,IAAIJ,EAAWlD,GAEzCrE,EAAOC,QAAUwH,G,cCjBjB,MAAM,OAAED,GAAW,EAAQ,KACrBD,EAAY,EAAQ,MAEpB,YAAEF,GAAgB,EAAQ,MAC1B,WACJ7C,EAAU,WACVK,EAAU,WACVE,EAAU,WACVM,EAAU,WACVE,GACE,EAAQ,KAENkC,EAASD,IAGfC,EACGC,MAAM,KACNC,IAAIJ,EAAW/C,GACfM,KAAK,CAACyC,EAAWF,GAAc9B,GAClCkC,EAAOC,MAAM,QAAQC,IAAI9C,GAAY+C,IAAI7C,GAAY8C,OAAOxC,GAE5DrF,EAAOC,QAAUwH,G,cCrBjB,MAAMF,EAAY,EAAQ,MACpB,OAAEC,GAAW,EAAQ,MAErB,QAAEtB,EAAO,YAAEE,GAAgB,EAAQ,KACnCqB,EAASD,IAGfC,EAAOC,MAAM,YAAYC,IAAIJ,EAAWrB,GACxCuB,EAAOC,MAAM,gBAAgBC,IAAIvB,GAEjCpG,EAAOC,QAAUwH,G,cCVjB,MAAMlD,EAAa,UAEnBA,EAAWuD,OAAO,CAChBC,WAAY7E,QAAQC,IAAI6E,sBACxBC,QAAS/E,QAAQC,IAAI+E,mBACrBC,WAAYjF,QAAQC,IAAIiF,wBAG1BpI,EAAOC,QAAUsE,G,cCRjB,MAAM1F,EAAW,EAAQ,KAQzBmB,EAAOC,QALSiB,eACOrC,EAASwJ,QAAQ,uC,cCJxC,MAAMjG,EAAM,EAAQ,KACdkG,EAAa,EAAQ,KAiC3BtI,EAAOC,QA/BW,CAACK,EAAO0E,KACxB,MAAMuD,EAAYD,EAAWE,gBAAgB,CAC3CC,QAAS,QACTC,KAAM,CACJpF,KAAMJ,QAAQC,IAAIwF,MAClBC,KAAM1F,QAAQC,IAAI0F,aAItBzG,EAAIa,KACF,CAAEkB,QAASa,GACX9B,QAAQC,IAAIc,aACZ,CAAEZ,UAAW,OACb,SAAUyF,EAAKC,GACb,GAAID,EACF,MAAM,IAAI3B,MAAM,oDAClB,MAAM6B,EAAc,CAClBC,KAAM,SACNC,GAAI5I,EACJ6I,QAAS,qBACTC,KAAM,iEAAiEL,eAGzER,EAAUc,SAASL,GAAa,SAAUF,EAAKtG,GACxCsG,GAAK3H,OACVA,KAAK2H,W,oBC5Bb9I,EAAOC,QAAUqJ,QAAQ,W,qBCAzBtJ,EAAOC,QAAUqJ,QAAQ,e,qBCAzBtJ,EAAOC,QAAUqJ,QAAQ,S,qBCAzBtJ,EAAOC,QAAUqJ,QAAQ,W,qBCAzBtJ,EAAOC,QAAUqJ,QAAQ,Y,qBCAzBtJ,EAAOC,QAAUqJ,QAAQ,iB,qBCAzBtJ,EAAOC,QAAUqJ,QAAQ,a,qBCAzBtJ,EAAOC,QAAUqJ,QAAQ,W,qBCAzBtJ,EAAOC,QAAUqJ,QAAQ,gBCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBrC,IAAjBsC,EACH,OAAOA,EAAazJ,QAGrB,IAAID,EAASuJ,EAAyBE,GAAY,CAGjDxJ,QAAS,IAOV,OAHA0J,EAAoBF,GAAUzJ,EAAQA,EAAOC,QAASuJ,GAG/CxJ,EAAOC,Q,MCrBA,EAAQ,KAChB6H,SAEP,MAAM8B,EAAS,EAAQ,KACP,EAAQ,IAExBvB,GAEAuB,EAAOC,OAAO,KAAM,KAClBlF,QAAQC,IAAI,e","sources":["webpack://backend/./Entities/Post.js","webpack://backend/./Entities/User.js","webpack://backend/./app.js","webpack://backend/./controllers/authHanlder.js","webpack://backend/./controllers/postHandler.js","webpack://backend/./controllers/userHandler.js","webpack://backend/./middlewares/checkAuth.js","webpack://backend/./middlewares/upload.js","webpack://backend/./routes/authRoute.js","webpack://backend/./routes/postRoute.js","webpack://backend/./routes/userRoute.js","webpack://backend/./utils/cloudinaryConfig.js","webpack://backend/./utils/dbConnect.js","webpack://backend/./utils/sendVerificationMail.js","webpack://backend/external commonjs \"bcrypt\"","webpack://backend/external commonjs \"cloudinary\"","webpack://backend/external commonjs \"cors\"","webpack://backend/external commonjs \"dotenv\"","webpack://backend/external commonjs \"express\"","webpack://backend/external commonjs \"jsonwebtoken\"","webpack://backend/external commonjs \"mongoose\"","webpack://backend/external commonjs \"multer\"","webpack://backend/external commonjs \"nodemailer\"","webpack://backend/webpack/bootstrap","webpack://backend/./index.js"],"sourcesContent":["const mongoose = require(\"mongoose\");\n\nconst Schema = mongoose.Schema;\n\nconst postSchema = new Schema({\n  title: { type: String, length: 150 },\n  mediaUrl: { type: String, required: true },\n  postedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: \"User\",\n  },\n  desc: { type: String },\n  like: Number,\n  dislike: Number,\n});\n\nconst Post = mongoose.model(\"Post\", postSchema);\n\nmodule.exports = Post;\n","// const { Schema } = require('mongoose')\nconst mongoose = require(\"mongoose\");\nconst bcrypt = require(\"bcrypt\");\n\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  username: { unique: true, type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true, minlength: 8 },\n  //TODO CHANGE it to false\n  isVerified: { type: Boolean, default: false },\n  posts: [\n    {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Post\",\n    },\n  ],\n  dateOfBirth: Date,\n  bio: { type: String },\n  pfp: String,\n});\n\n// something going wrong with async hashing\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\")) next();\n  const salt = await bcrypt.genSalt(10);\n  const hash = await bcrypt.hash(this.password, salt);\n  this.password = hash;\n  next();\n});\n\nconst User = mongoose.model(\"User\", userSchema);\n\nmodule.exports = User;\n","const express = require(\"express\");\nconst cors = require(\"cors\");\nconst authRouter = require(\"./routes/authRoute\");\nconst postRouter = require(\"./routes/postRoute\");\nconst userRouter = require(\"./routes/userRoute\");\n\nconst app = express();\napp.use(express.json());\napp.use(cors({ origin: \"http://localhost:3000\", credentials: true }));\napp.use(\"/api/v1/auth\", authRouter);\napp.use(\"/api/v1/posts\", postRouter);\napp.use(\"/api/v1/user\", userRouter);\n\nmodule.exports = app;\n","const bcrypt = require(\"bcrypt\");\nconst jwt = require(\"jsonwebtoken\");\nconst User = require(\"../Entities/User\");\nconst sendVerificationMail = require(\"../utils/sendVerificationMail\");\n\nconst login = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const foundUser = await User.findOne({\n      email: email,\n    });\n\n    if (!foundUser) {\n      return res\n        .status(200)\n        .json({ success: false, message: \"User not found\" });\n    }\n\n    if (!foundUser.isVerified) {\n      return res\n        .status(200)\n        .json({ success: false, message: \"Email is not verified\" });\n    }\n\n    const result = await bcrypt.compare(password, foundUser.password);\n\n    if (result !== true) {\n      return res\n        .status(200)\n        .json({ success: false, message: \"invalid credentials\" });\n    }\n\n    const token = jwt.sign(\n      {\n        username: foundUser.username,\n        email: foundUser.email,\n      },\n      process.env.JWT_SECRET,\n      { expiresIn: \"1d\" }\n    );\n\n    res.status(200).json({\n      success: true,\n      isVerified: foundUser.isVerified,\n      user: {\n        email: foundUser.email,\n        username: foundUser.username,\n        pfp: foundUser.pfp,\n      },\n      token,\n    });\n  } catch (e) {\n    res.status(500).json({ success: false, error: { e, message: e.message } });\n  }\n};\n\nconst register = async (req, res) => {\n  const { username, password, email, dateOfBirth } = req.body;\n  const foundUser = await User.findOne({\n    email: email,\n  });\n\n  if (foundUser?.email === email) {\n    return res\n      .status(200)\n      .json({ success: false, message: \"User already exists\" });\n  }\n\n  const createdUser = await User.create({\n    username,\n    password,\n    email,\n    dateOfBirth,\n  });\n\n  sendVerificationMail(createdUser.email, createdUser._id);\n\n  res.status(200).json({ success: true, message: \"User created successfully\" });\n};\n\n// Email verification\nconst verification = async (req, res) => {\n  const { token } = req.params;\n\n  try {\n    const result = jwt.verify(token, process.env.EMAIL_SECRET);\n\n    let foundUser = await User.findById(result.user_id);\n    if (!foundUser) {\n      res.status(200).json({ success: false, error: \"Verification failed\" });\n    }\n\n    foundUser.isVerified = true;\n    await foundUser.save();\n\n    res.status(200).json({ success: true });\n  } catch (e) {\n    res.status(401).json({ success: false, error: \"verificaton failed\" });\n  }\n};\n\n// Sending back user\nconst validate = async (req, res) => {\n  if (!res.locals.user) {\n    return res\n      .status(200)\n      .json({ success: false, error: \"authentication failed\" });\n  }\n\n  res.status(200).json({ success: true, user: res.locals.user });\n};\n\nmodule.exports = { login, register, verification, validate };\n","const Post = require(\"../Entities/Post\");\nconst User = require(\"../Entities/User\");\nconst cloudinary = require(\"../utils/cloudinaryConfig\");\n\nconst getAllPost = async (req, res) => {\n  try {\n    // const posts = await Post.find();\n    const posts = await Post.find().populate(\"postedBy\");\n    // const posts = await Post.aggregate([\n    //   {\n    //     $lookup: {\n    //       from: \"users\",\n    //       localField: \"username\",\n    //       foreignField: \"user_id\",\n    //       as: \"posts\",\n    //     },\n    //   },\n    // ]);\n    console.log(\"something happened\");\n    res.status(200).json({ success: true, posts });\n  } catch (e) {\n    console.log(e);\n    res.status(500).json({ success: false, error: \"Something went wrong\" });\n  }\n};\n\nconst getOnePost = async (req, res) => {\n  res.status(200).json({ success: true, post: \"single post\" });\n};\n\nconst createPost = async (req, res) => {\n  // verify if user is logged In or not\n  // getting it from checkAuth middleware\n\n  // console.log(req.file.path);\n  try {\n    const { user } = res.locals;\n    const { title } = req.body;\n    const filePath = `${req.file.path}`;\n    const result = await cloudinary.uploader.upload(filePath);\n    const mediaUrl = result.secure_url;\n\n    const postAuthor = await User.findOne({\n      username: user.username,\n    });\n\n    if (!postAuthor)\n      return res.status(200).json({ success: false, error: \"Check user\" });\n\n    const createdPost = await Post.create({\n      title,\n      mediaUrl,\n      // TODO\n      postedBy: postAuthor._id,\n    });\n\n    await User.findOneAndUpdate(\n      { username: user.username },\n      {\n        $push: {\n          posts: [createdPost._id],\n        },\n      }\n    );\n\n    res.status(200).json({ success: true, message: \"Post created\" });\n  } catch (e) {\n    console.log(e);\n    res.status(400).json({ sucess: false, message: e.message });\n  }\n};\n\nconst updatePost = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const data = req.body;\n\n    const updatedPost = await Post.findByIdAndUpdate({ _id: id }, data);\n    console.log(updatedPost);\n\n    res.status(200).json({ success: true, updatedPost: \"update\" });\n  } catch (e) {\n    console.log(e);\n    res.status(400).json({ sucess: false, message: e.message });\n  }\n};\n\nconst deletePost = async (req, res) => {\n  try {\n    const { id } = req.params;\n    await Post.findByIdAndDelete(id);\n    res.status(200).json({ success: true });\n  } catch (e) {\n    console.log(e);\n    res.status(400).json({ sucess: false, message: e.message });\n  }\n};\n\nmodule.exports = { getAllPost, getOnePost, updatePost, deletePost, createPost };\n","const User = require(\"../Entities/User\");\n\nconst profile = async (req, res) => {\n  try {\n    const { user } = res.locals;\n\n    const result = await User.find({\n      email: user.email,\n    })\n      .select(\"-password\")\n      .populate(\"posts\");\n\n    res.status(200).json({ success: true, result });\n  } catch (e) {\n    res.status(400).json({ success: false, error: e.message });\n  }\n};\n\nconst profileById = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const foundUser = await User.findById(id)\n      .select(\"-password\")\n      .populate(\"posts\");\n\n    if (!foundUser)\n      return res.status(200).json({ success: false, error: \"user not found\" });\n\n    res.status(200).json({ success: true, result: foundUser });\n  } catch (e) {\n    res.status(400).json({ success: false, error: e.message });\n  }\n};\n\nmodule.exports = { profile, profileById };\n","const jwt = require(\"jsonwebtoken\");\n\nconst checkAuth = async (req, res, next) => {\n  try {\n    let token = req.headers?.authentication;\n    token = token.split(\" \")[1];\n\n    if (!token) {\n      return res.status(200).json({\n        error: {\n          message: \"token not found\",\n        },\n      });\n    }\n\n    const result = await jwt.verify(token, process.env.JWT_SECRET);\n    res.locals.user = result;\n    next();\n  } catch (e) {\n    res.status(200).json({ success: false, error: e });\n  }\n};\n\nmodule.exports = checkAuth;\n","const multer = require(\"multer\");\n\nconst storage = multer.diskStorage({\n  destination(req, file, cb) {\n    cb(null, \"images/\");\n  },\n  filename(req, file, cb) {\n    cb(null, `${file.originalname.split(\".\")[0]}.jpg`);\n  },\n});\n\nconst upload = multer({\n  storage,\n  limits: { fileSize: 1000000 },\n  fileFilter(req, file, cb) {\n    if (!file.originalname.match(/\\.(jpg|jpeg|png)$/i)) {\n      return cb(new Error(\"Please upload an image of type jpg jpeg png only\"));\n    }\n    cb(undefined, true);\n  },\n});\n\n// const upload = multer({\n// dest: \"images/\",\n// filename(req, file, cb) {\n//   cb(null, `${file.originalname.split(\".\")[0]}.jpg`);\n// },\n// });\n\nexports.uploadImage = upload.single(\"file\");\n","const checkAuth = require(\"../middlewares/checkAuth\");\nconst { Router } = require(\"express\");\nconst {\n  login,\n  register,\n  verification,\n  validate,\n} = require(\"../controllers/authHanlder\");\n\nconst router = Router();\n\n// /api/v1/auth\nrouter.route(\"/login\").post(login);\nrouter.route(\"/register\").post(register);\nrouter.route(\"/verification/:token\").get(verification);\nrouter.route(\"/validate\").get(checkAuth, validate);\n\nmodule.exports = router;\n","const { Router } = require(\"express\");\nconst checkAuth = require(\"../middlewares/checkAuth\");\n// const checkAuth = require(\"../middlewares/checkAuth\");\nconst { uploadImage } = require(\"../middlewares/upload\");\nconst {\n  getAllPost,\n  getOnePost,\n  updatePost,\n  deletePost,\n  createPost,\n} = require(\"../controllers/postHandler\");\n\nconst router = Router();\n// /api/v1/posts\n// uploadImage,\nrouter\n  .route(\"/\")\n  .get(checkAuth, getAllPost)\n  .post([checkAuth, uploadImage], createPost);\nrouter.route(\"/:id\").get(getOnePost).put(updatePost).delete(deletePost);\n\nmodule.exports = router;\n","const checkAuth = require(\"../middlewares/checkAuth\");\nconst { Router } = require(\"express\");\n\nconst { profile, profileById } = require('../controllers/userHandler');\nconst router = Router();\n\n// /api/v1/auth\nrouter.route(\"/profile\").get(checkAuth, profile);\nrouter.route(\"/profile/:id\").get(profileById);\n\nmodule.exports = router;\n","const cloudinary = require(\"cloudinary\").v2;\n\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\nmodule.exports = cloudinary;\n","const mongoose = require(\"mongoose\");\n// process.env.URI\n\nconst connect = async () => {\n  const client = await mongoose.connect(\"mongodb://127.0.0.1:27017/memeland\");\n  return client;\n};\n\nmodule.exports = connect;\n","const jwt = require(\"jsonwebtoken\");\nconst nodemailer = require(\"nodemailer\");\n\nconst sendEmail = (email, id) => {\n  const transport = nodemailer.createTransport({\n    service: \"Gmail\",\n    auth: {\n      user: process.env.EMAIL,\n      pass: process.env.EMAIL_PWD,\n    },\n  });\n\n  jwt.sign(\n    { user_id: id },\n    process.env.EMAIL_SECRET,\n    { expiresIn: \"1d\" },\n    function (err, emailToken) {\n      if (err)\n        throw new Error(\"something went wrong with assinging jwt to email\");\n      const mailOptions = {\n        from: \"manish\",\n        to: email,\n        subject: \"Email Verification\",\n        html: `Press <a href=\"http://localhost:4000/api/v1/auth/verification/${emailToken}\">here</a>`,\n      };\n\n      transport.sendMail(mailOptions, function (err, res) {\n        if (!err) next();\n        next(err);\n      });\n    }\n  );\n};\n\nmodule.exports = sendEmail;\n","module.exports = require(\"bcrypt\");","module.exports = require(\"cloudinary\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"multer\");","module.exports = require(\"nodemailer\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const dotenv = require('dotenv')\ndotenv.config()\n\nconst server = require(\"./app\");\nconst connect = require('./utils/dbConnect');\n\nconnect()\n\nserver.listen(4000, () => {\n  console.log('running')\n})\n"],"names":["mongoose","postSchema","Schema","title","type","String","length","mediaUrl","required","postedBy","Types","ObjectId","ref","desc","like","Number","dislike","Post","model","module","exports","bcrypt","userSchema","username","unique","email","password","minlength","isVerified","Boolean","default","posts","dateOfBirth","Date","bio","pfp","pre","async","next","this","isModified","salt","genSalt","hash","User","express","cors","authRouter","postRouter","userRouter","app","use","json","origin","credentials","jwt","sendVerificationMail","login","req","res","body","foundUser","findOne","status","success","message","compare","token","sign","process","env","JWT_SECRET","expiresIn","user","e","error","register","createdUser","create","_id","verification","params","result","verify","EMAIL_SECRET","findById","user_id","save","validate","locals","cloudinary","getAllPost","find","populate","console","log","getOnePost","post","updatePost","id","data","updatedPost","findByIdAndUpdate","sucess","deletePost","findByIdAndDelete","createPost","filePath","file","path","uploader","upload","secure_url","postAuthor","createdPost","findOneAndUpdate","$push","profile","select","profileById","headers","authentication","split","multer","storage","diskStorage","destination","cb","filename","originalname","limits","fileSize","fileFilter","match","Error","undefined","uploadImage","single","checkAuth","Router","router","route","get","put","delete","config","cloud_name","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","connect","nodemailer","transport","createTransport","service","auth","EMAIL","pass","EMAIL_PWD","err","emailToken","mailOptions","from","to","subject","html","sendMail","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","server","listen"],"sourceRoot":""}